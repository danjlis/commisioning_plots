#include "CaloAna.h"

// G4Hits includes
#include <g4main/PHG4Hit.h>
#include <g4main/PHG4HitContainer.h>

// G4Cells includes
#include <g4detectors/PHG4Cell.h>
#include <g4detectors/PHG4CellContainer.h>

// Tower includes
#include <calobase/RawTower.h>
#include <calobase/RawTowerContainer.h>
#include <calobase/RawTowerGeom.h>
#include <calobase/RawTowerGeomContainer.h>
#include <calobase/TowerInfoContainerv1.h>
#include <calobase/TowerInfov1.h>

// Cluster includes
#include <calobase/RawCluster.h>
#include <calobase/RawClusterContainer.h>

#include <fun4all/Fun4AllHistoManager.h>
#include <fun4all/Fun4AllReturnCodes.h>

#include <phool/getClass.h>

#include <TFile.h>
#include <TNtuple.h>
#include <TTree.h>
#include <TH2.h>

#include <Event/Event.h>
#include <Event/packet.h>
#include <cassert>
#include <sstream>
#include <string>

using namespace std;

CaloAna::CaloAna(const std::string& name, const std::string& filename)
  : SubsysReco(name)
  , detector("HCALIN")
  , outfilename(filename)
{
}

CaloAna::~CaloAna()
{
  delete hm;
  delete g4hitntuple;
  delete g4cellntuple;
  delete towerntuple;
  delete clusterntuple;
}

int CaloAna::Init(PHCompositeNode*)
{
  hm = new Fun4AllHistoManager(Name());
  // create and register your histos (all types) here
  // TH1 *h1 = new TH1F("h1",....)
  // hm->registerHisto(h1);
  outfile = new TFile(outfilename.c_str(), "RECREATE");

  towerntuple = new TTree("towerntup", "Towers");
  towerntuple->Branch("energy",&m_energy);
  towerntuple->Branch("etabin",&m_etabin);
  towerntuple->Branch("phibin",&m_phibin);
  for (int i = 0; i < 31;i++)
    {
      // towerntuple->Branch(Form("waveform_%i",i),&m_waveform[i]);
    }
  // towerntuple->Branch("waveform_0",&m_waveform_0);
  // towerntuple->Branch("waveform_1",&m_waveform_1);
  // towerntuple->Branch("waveform_2",&m_waveform_2);
  // towerntuple->Branch("waveform_3",&m_waveform_3);
  // towerntuple->Branch("waveform_4",&m_waveform_4);
  // towerntuple->Branch("waveform_5",&m_waveform_5);
  // towerntuple->Branch("waveform_6",&m_waveform_6);
  // towerntuple->Branch("waveform_7",&m_waveform_7);
  // towerntuple->Branch("waveform_8",&m_waveform_8);
  // towerntuple->Branch("waveform_9",&m_waveform_9);
  // towerntuple->Branch("waveform_10",&m_waveform_10);
  // towerntuple->Branch("waveform_11",&m_waveform_11);
  // towerntuple->Branch("waveform_12",&m_waveform_12);
  // towerntuple->Branch("waveform_13",&m_waveform_13);
  // towerntuple->Branch("waveform_14",&m_waveform_14);
  // towerntuple->Branch("waveform_15",&m_waveform_15);

  return 0;
}

int CaloAna::process_event(PHCompositeNode* topNode)
{

  process_towers(topNode);
  return Fun4AllReturnCodes::EVENT_OK;
}


int CaloAna::process_towers(PHCompositeNode* topNode)
{
  ostringstream nodename;
  ostringstream geonodename;

  nodename.str("");
  nodename << "TOWERS_CEMC_" << detector;
  geonodename.str("");
 
  // TowerInfoContainer* offlinetowers = findNode::getClass<TowerInfoContainerv1>(topNode, "TOWERINFO_CALIB_CEMC");
  TowerInfoContainer* offlinetowers = findNode::getClass<TowerInfoContainerv1>(topNode, "TOWERS_CEMC");



  int size = offlinetowers->size(); //online towers should be the same!

  for (int channel = 0; channel < size;channel++)
    {
      TowerInfo* offlinetower = offlinetowers->get_tower_at_channel(channel);
      float offlineenergy = offlinetower->get_energy();
      unsigned int towerkey = offlinetowers->encode_key(channel);
      int ieta = offlinetowers->getTowerEtaBin(towerkey);
      int iphi = offlinetowers->getTowerPhiBin(towerkey);
      
      m_energy.push_back(offlineenergy);
      m_etabin.push_back(ieta);
      m_phibin.push_back(iphi);

      // towerntuple->Fill(offlineenergy,ieta,iphi);
    }

  // cout << 2 << endl;

  
  // cout << 5 << endl;
  towerntuple->Fill();
  
  m_etabin.clear();
  m_phibin.clear();
  m_energy.clear();



  
  return Fun4AllReturnCodes::EVENT_OK;
}

int CaloAna::End(PHCompositeNode* /*topNode*/)
{
  outfile->cd();
 
  towerntuple->Write();

  outfile->Write();
  outfile->Close();
  delete outfile;
  hm->dumpHistos(outfilename, "UPDATE");
  return 0;
}
